searchState.loadedDescShard("indexical", 0, "Indexical: Human-Friendly Indexed Collections\nFamily of <code>Arc</code> pointers.\nInterface for bit-set implementations.\nThe index for <code>Self</code>.\nAn unordered collections of pairs <code>(R, C)</code>, implemented with …\nAn unordered collections of <code>T</code>s, implemented with a bit-set.\nExtension trait for iterators producing index sets.\nAn indexed collection of objects, implemented with an …\nLinks a type to its index.\nType of iterator returned by <code>iter</code>.\nCoherence hack for the <code>ToIndex</code> trait.\nCoherence hack for the <code>ToIndex</code> trait.\nCoherence hack for the <code>ToIndex</code> trait.\nPointer type for a given family.\nAbstraction over smart pointers with <code>&#39;static</code> interiors.\nFamily of <code>Rc</code> pointers.\nFamily of <code>&amp;</code>-references.\nImplicit conversions from elements to indexes. Commonly …\nReturns immutable access to the underlying indexed vector.\nSets all bits to 0.\nRemoves every element from <code>self</code>.\nClears all the elements from the <code>row</code>.\nReturns the <code>IndexedDomain</code> for the column type.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCreates an <code>IndexSet</code> from an iterator over <code>T</code>s.\nReturns true if <code>index</code> is 1.\nReturns true if <code>value</code> is contained in the domain.\nReturns true if <code>index</code> is contained in <code>self</code>.\nCopies <code>other</code> into <code>self</code>. Must have the same lengths.\nCreates a new index type and associates it with an object …\nConstructs a new bit-set with a domain of size <code>size</code>.\nSimilar to <code>IndexedDomain::index</code>, except it adds <code>value</code> to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImplementations of the <code>BitSet</code> trait for different backends.\nGets the index corresponding to <code>value</code>.\nReturns an iterator over all the indices contained in <code>self</code>.\nReturns a reference to the inner set.\nSets <code>index</code> to 1, returning true if <code>self</code> changed.\nAdds <code>value</code> to the domain, returning its new index.\nInserts a pair <code>(row, col)</code> into the matrix, returning true …\nAdds the element <code>elt</code> to <code>self</code>, returning true if <code>self</code> …\nAdds every element of the domain to <code>self</code>.\nAdds every element of the domain to <code>self</code>.\nRemoves all ones in <code>self</code> not in <code>other</code>.\nRemoves every element of <code>self</code> not in <code>other</code>.\nRemoves every element of <code>self</code> not in <code>other</code>, returning true …\nRemoves all ones in <code>self</code> not in <code>other</code>, returning true if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFlips all bits in <code>self</code>.\nReturns true if the domain is empty.\nReturn true if <code>self</code> has no elements.\nReturns true if there are no ones in the bit-set.\nReturns true if every element in <code>other</code> is also in <code>self</code>.\nReturns an iterator over all the indices of ones in the …\nReturns an iterator over all the objects contained in <code>self</code>.\nReturns an iterator over the pairs of indices and objects …\nReturns the number of ones in the bit-set.\nReturns the number of elements in the domain.\nReturns the number of elements in <code>self</code>.\nCreates a new domain from an indexed vector.\nCreates an empty matrix.\nCreates an empty index set.\nReturns an iterator over the elements in <code>row</code>.\nReturns the <code>IndexSet</code> for a particular <code>row</code>.\nReturns an iterator over all rows in the matrix.\nRemoves all ones from <code>other</code> in <code>self</code>.\nRemoves every element of <code>other</code> from <code>self</code>.\nRemoves every element of <code>other</code> from <code>self</code>, returning true …\nRemoves all ones from <code>other</code> in <code>self</code>, returning true if <code>self</code>…\nReturns true if all ones in <code>other</code> are a one in <code>self</code>.\nConverts <code>self</code> to an index over <code>T</code>.\nAdds all ones from <code>other</code> to <code>self</code>.\nAdds each element of <code>other</code> to <code>self</code>.\nAdds each element of <code>other</code> to <code>self</code>, returning true if <code>self</code> …\nAdds all ones from <code>other</code> to <code>self</code>, returning true if <code>self</code> …\nAdds all elements of <code>from</code> into the row <code>into</code>.\nAdds all elements from the row <code>from</code> into the row <code>into</code>.\nGets the object corresponding to <code>index</code>.\nA fixed-size bitset type with a dense representation.\n<code>IndexMatrix</code> specialized to the <code>rustc_index::bit_set::BitSet</code>…\n<code>IndexSet</code> specialized to the <code>rustc_index::bit_set::BitSet</code> …\n<code>IndexMatrix</code> specialized to the <code>rustc_index::bit_set::BitSet</code>…\n<code>IndexSet</code> specialized to the <code>rustc_index::bit_set::BitSet</code> …\n<code>IndexMatrix</code> specialized to the <code>rustc_index::bit_set::BitSet</code>…\n<code>IndexSet</code> specialized to the <code>rustc_index::bit_set::BitSet</code> …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA fixed-size 2D bit matrix type with a dense …\nA fixed-size bitset type with a dense representation.\nA fixed-size bitset type with a partially dense, partially …\nSize of the domain representable by this type, e.g. 64 for …\nValue which represents the <code>FiniteBitSet</code> having no bits set.\nValue which represents the <code>FiniteBitSet</code> having every bit …\nA fixed-sized bitset type represented by an integer type. …\nIntegral type used to represent the bit set.\nA resizable bitset type with a dense representation.\nA fixed-size bitset type with a hybrid representation: …\nValue for one as the integral type.\nA fixed-column-size, variable-row-size 2D bit matrix with …\nA fixed-size bitset type with a sparse representation and …\nValue for zero as the integral type.\nPerform a checked left shift on the integral type.\nPerform a checked right shift on the integral type.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")